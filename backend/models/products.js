import { DataTypes } from 'sequelize';
import { sequelize } from '../config/sequelize.js';

const Products = sequelize.define(
  'Products',
  {
    ID: {
      type: DataTypes.BIGINT.UNSIGNED,
      primaryKey: true,
      autoIncrement: true,
      allowNull: false,
    },
    productId: {
      type: DataTypes.STRING(50),
      unique: true,
      allowNull: false, // it's auto-generated by MySQL
    },
    categoryId: {
      type: DataTypes.BIGINT.UNSIGNED,
      allowNull: false,
      references: {
        model: 'category', // must match your Category model's tableName
        key: 'ID',
      },
      onUpdate: 'CASCADE',
      onDelete: 'CASCADE',
    },
    productName: {
      type: DataTypes.STRING(255),
      allowNull: false,
    },
    productDescription: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
    productDetails: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
    price: {
      type: DataTypes.DECIMAL(10, 2),
      allowNull: false,
      get() {
        const value = this.getDataValue('price');
        return parseFloat(value);
      },
    },
    image1: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
    image2: {
      type: DataTypes.TEXT,
      allowNull: true,
    },
    image3: {
      type: DataTypes.TEXT,
      allowNull: true,
    },
    image4: {
      type: DataTypes.TEXT,
      allowNull: true,
    },
    images: {
      type: DataTypes.VIRTUAL,
      get() {
        // Collect all image fields into an array
        const images = [
          this.getDataValue('image1'),
          this.getDataValue('image2'),
          this.getDataValue('image3'),
          this.getDataValue('image4'),
        ].filter((image) => image !== null); // Exclude null values
        return images;
      },
    },
    stockQuantity: {
      type: DataTypes.BIGINT.UNSIGNED,
      allowNull: false,
    },
    isBestSeller: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false,
    },
    isActive: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: true,
    },
    expirationDate: {
      type: DataTypes.DATE,
      allowNull: true,
    },
    createAt: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW,
    },
    updateAt: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW,
    },
  },
  {
    tableName: 'products',
    timestamps: false,
  }
);

export default Products;