import { DataTypes } from 'sequelize';
import { sequelize } from '../config/sequelize.js';

const Customer = sequelize.define(
  'Customer',
  {
    ID: {
      type: DataTypes.BIGINT.UNSIGNED,
      primaryKey: true,
      autoIncrement: true,
      allowNull: false,
    },
    customerId: {
      type: DataTypes.STRING(50),
      unique: true,
      allowNull: false, // it's auto-generated by MySQL
    },
    medicalInstitutionName: {
      type: DataTypes.STRING(255),
      allowNull: false,
    },
    contactNumber: {
      type: DataTypes.STRING(15),
      allowNull: false,
    },
    landlineNumber: {
      type: DataTypes.STRING(15),
      allowNull: true,
    },
    emailAddress: {
      type: DataTypes.STRING(255),
      allowNull: false,
    },
    fullAddress: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
    imageProof: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
    repFirstName: {
      type: DataTypes.STRING(255),
      allowNull: false,
    },
    repLastName: {
      type: DataTypes.STRING(255),
      allowNull: false,
    },
    repContactNumber: {
      type: DataTypes.STRING(15),
      allowNull: false,
    },
    repEmailAddress: {
      type: DataTypes.STRING(255),
      allowNull: false,
    },
    repJobPosition: {
      type: DataTypes.STRING(255),
      allowNull: false,
    },
    loginPhoneNum: {
      type: DataTypes.STRING(15),
      unique: true,
      allowNull: true,
    },
    loginEmail: {
      type: DataTypes.STRING(255),
      unique: true,
      allowNull: true,
    },
    loginPassword: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
    createAt: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW,
    },
    updateAt: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW,
    },
    verifiedCustomer: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    verificationCode: {
      type: DataTypes.STRING(10),
      allowNull: true,
    },
    codeExpiresAt: {
      type: DataTypes.DATE,
      allowNull: true,
    },
    loginToken: {
      type: DataTypes.STRING(255),
      allowNull: true,
    },
    resetPasswordToken: {
      type: DataTypes.STRING(255),
      allowNull: true
    }
  },
  {
    tableName: 'customer',
    timestamps: false,
    validate: {
      emailOrPhoneOnly() {
        if (
          (this.loginEmail && this.loginPhoneNum) ||
          (!this.loginEmail && !this.loginPhoneNum)
        ) {
          throw new Error(
            'Either loginEmail or loginPhoneNum must be provided, but not both.'
          );
        }
      },
    },
  }
);

export default Customer;